name: CI/CD
on:
  workflow_dispatch:
    inputs:
      AutoMoq:
        description: 'Run for AutoMoq package'
        required: true
        type: boolean
        default: true
      AutoNSubstitute:
        description: 'Run for AutoNSubstitute package'
        required: true
        type: boolean
        default: true
      AutoFakeItEasy:
        description: 'Run for AutoFakeItEasy package'
        required: true
        type: boolean
        default: true
  push:
    branches: [ '*' ]
    paths: 
      - 'src/**'
  pull_request:
    paths:
      - 'src/**'
    types: [opened, synchronize, reopened]

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  Version: 0.0.${{ github.run_number }}
  Configuration: Release
  Namespace: Objectivity.AutoFixture.XUnit2
  StrongNameKeyName: key.snk
  CoverageDirectory: ${{ github.workspace }}\src\opencover

defaults:
  run:
    shell: pwsh

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.MATRIX }}
    steps:
      - id: set-matrix
        run: |
          $allModules = @{
            AutoMoq=$${{inputs.AutoMoq}};
            AutoNSubstitute=$${{inputs.AutoNSubstitute}};
            AutoFakeItEasy=$${{inputs.AutoFakeItEasy}}
          }
          $runModules = Foreach ($module in ($allModules.GetEnumerator() | Where-Object { $_.Value })) {$module.Name}
          Write-Host "Modules to run: $($runModules)"
          "MATRIX=$runModules" >> $env:GITHUB_OUTPUT
  build:
    needs: init
    runs-on: windows-latest #We are using windows instead of ubuntu becaus it provides support for net472 & net48.
    timeout-minutes: 15
    strategy:
      matrix:
        package_module: [AutoMoq, AutoNSubstitute, AutoFakeItEasy]
    steps:
      - name: 🤘 checkout
        uses: actions/checkout@v3
      - name: 🖊️ materialize signing key
        id: signing-key
        run: |
          $path = [IO.Path]::Combine("${{ github.workspace }}","src","${{ env.StrongNameKeyName }}")
          [IO.File]::WriteAllBytes($path, [Convert]::FromBase64String("$env:StrongNameKey"))
          "PATH=$path" >> $env:GITHUB_OUTPUT
        env:
          StrongNameKey: ${{ secrets.SIGNING_KEY }}
      - name: 🏗️ build
        run: dotnet build ./src/${{ env.Namespace }}.${{ matrix.package_module }}.sln
        env:
          CI: true
          StrongNameKey: ${{ secrets.SIGNING_KEY }}
          StrongNameKeyPath: ${{ steps.signing-key.outputs.PATH }}
      - name: 🧪 test Core in net7.0 & collect coverage
        id: core-code-coverage
        run: |
          $path = [IO.Path]::Combine("$env:CoverageDirectory","$env:CoverageFileName.xml")
          dotnet test ./src/${{ env.Namespace }}.Core.Tests/ --no-build -f $env:TargetFramework -e:CollectCoverage=true -e:CoverletOutputFormat=opencover -e:Exclude="[xunit*]*" -e:CoverletOutput=$path
          "FILE=$env:CoverageFileName.$env:TargetFramework.xml" >> $env:GITHUB_OUTPUT
        env:
          CoverageFileName: ${{ env.Namespace }}.Core
          TargetFramework: net7.0
      - name: 🧪 test Core in net472
        run: dotnet test ./src/${{ env.Namespace }}.Core.Tests/ --no-build -f net472
      - name: 🧪 test Core in net48
        run: dotnet test ./src/${{ env.Namespace }}.Core.Tests/ --no-build -f net48
      - name: 🧪 test ${{ matrix.package_module }} in net7.0  & collect coverage 
        id: module-code-coverage
        run: |
          $path = [IO.Path]::Combine("$env:CoverageDirectory","$env:CoverageFileName.xml")
          dotnet test ./src/${{ env.Namespace }}.${{ matrix.package_module }}.Tests/ --no-build -f $env:TargetFramework -e:CollectCoverage=true -e:CoverletOutputFormat=opencover -e:Exclude="[xunit*]*" -e:CoverletOutput=$path
          "FILE=$env:CoverageFileName.$env:TargetFramework.xml" >> $env:GITHUB_OUTPUT
        env:
          CoverageFileName: ${{ env.Namespace }}.${{ matrix.package_module }}
          TargetFramework: net7.0
      - name: 🧪 test ${{ matrix.package_module }} in net472
        run: dotnet test ./src/${{ env.Namespace }}.${{ matrix.package_module }}.Tests/ --no-build -f net472
      - name: 🧪 test ${{ matrix.package_module }} in net48
        run: dotnet test ./src/${{ env.Namespace }}.${{ matrix.package_module }}.Tests/ --no-build -f net48
      - name: 📤 upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ steps.core-code-coverage.outputs.FILE }},${{ steps.module-code-coverage.outputs.FILE }}
          directory: ${{ env.CoverageDirectory }}
          flags: unittests
      - name: 📦 pack
        run: dotnet pack ./src/${{ env.Namespace }}.${{ matrix.package_module }} --no-restore
        env:
          CI: true
          StrongNameKey: ${{ secrets.SIGNING_KEY }}
          StrongNameKeyPath: ${{ steps.signing-key.outputs.PATH }}
      - name: 🔼 upload packages
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ./src/**/*.nupkg
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    steps:
      - name: 🔽 download packages
        uses: actions/download-artifact@v3
        with:
          name: packages
      - name: Display structure of downloaded files
        run: ls -R
      # TODO: Publish to NuGet