name: 'ðŸŽ± Prepare workflows configuration'

on:
  workflow_call:
    inputs:
      buildAutoFakeItEasy:
        description: 'Build AutoFakeItEasy'
        required: false
        type: boolean
        default: true
      buildAutoMoq:
        description: 'Build AutoMoq'
        required: false
        type: boolean
        default: true
      buildAutoNSubstitute:
        description: 'Build AutoNSubstitute'
        required: false
        type: boolean
        default: true
    outputs:
      modules:
        description: Modules to build and pack
        value: ${{ jobs.run.outputs.modules }}
      version:
        description: Version used for building, packing and tagging
        value: ${{ jobs.run.outputs.version }}
      namespace:
        description: Global namespace 
        value: Objectivity.AutoFixture.XUnit2
      configuration:
        description: Global build configuration
        value: Release

defaults:
  run:
    shell: pwsh

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    outputs:
      modules: ${{ steps.determine-modules.outputs.modules }}
      version: ${{ steps.determine-version.outputs.version }}
    steps:
    - name: ðŸ“¥ checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: ðŸŽ° determine modules
      id: determine-modules
      run: |
        $ErrorActionPreference = 'stop'
        $inputModules = @{
          AutoMoq = "${env:BUILD_AUTO_MOQ}";
          AutoNSubstitute = "${env:BUILD_AUTO_NSUBSTITUTE}";
          AutoFakeItEasy = "${env:BUILD_AUTO_FAKEITEASY}"
        }

        Write-Output "::group::Input parameters"
        foreach ($module in $inputModules.GetEnumerator()) {
          Write-Output "Build $($module.Name): $($module.Value)"
        }
        Write-Output "::endgroup::"

        $selectedModules = @()
        foreach ($module in $inputModules.GetEnumerator()) {
          [bool]$shouldBuildModule = $true
          if ([bool]::TryParse($module.Value, [ref]$shouldBuildModule) -eq $false) {
            Write-Host "::debug::Unable to parse input value for module $($module.Name)."
          }
          if ($shouldBuildModule) {
            $selectedModules += $module.Name
          }
        }

        if ($selectedModules.count -gt 0) { $selectedModules = @("Core") + $selectedModules }
        Write-Output "::group::Selected modules"
        foreach ($selectedModule in $selectedModules) {
          Write-Output "$($selectedModule)"
        }
        Write-Output "::endgroup::"

        "modules=$($selectedModules | ConvertTo-JSON -AsArray -Compress)" >> $env:GITHUB_OUTPUT
      env:
        BUILD_AUTO_FAKEITEASY: ${{ inputs.buildAutoFakeItEasy }}
        BUILD_AUTO_MOQ: ${{ inputs.buildAutoMoq }}
        BUILD_AUTO_NSUBSTITUTE: ${{ inputs.buildAutoNSubstitute }}
    - name: ðŸŽ± determine next version
      id: determine-version
      uses: ./.github/actions/determine-next-version
